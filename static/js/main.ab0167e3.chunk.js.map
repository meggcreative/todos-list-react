{"version":3,"sources":["features/tasks/Form/styled.js","features/tasks/tasksLocalStorage.js","features/tasks/tasksSlice.js","features/tasks/Form/index.js","features/tasks/TaskList/styled.js","features/tasks/TaskList/index.js","features/tasks/Buttons/styled.js","features/tasks/Buttons/index.js","common/Section/styled.js","common/Section/index.js","common/Header/index.js","common/Container/styled.js","common/Container/index.js","features/tasks/Button/index.js","features/tasks/Tasks.js","App.js","reportWebVitals.js","features/tasks/getExampleTasks.js","features/tasks/TaskList/tasksSaga.js","store.js","index.js","theme.js"],"names":["StyledForm","styled","form","theme","breakpoint","mobile","StyledInput","input","color","alto","Button","button","localStorageKey","saveTasksInLocalStorage","tasks","localStorage","setItem","JSON","stringify","tasksSlice","createSlice","name","initialState","parse","getItem","hideDone","reducers","addTask","payload","push","toggleHideDone","state","toggleTaskDone","action","index","findIndex","task","id","done","removeTask","splice","setAllDone","fetchExampleTasks","setTasks","actions","selectTasks","Form","useState","newTaskContent","setNewTaskContent","inputRef","useRef","dispatch","useDispatch","className","onSubmit","event","preventDefault","trim","content","nanoid","current","focus","ref","value","placeholder","required","onChange","target","List","ul","white","Item","li","silver","hidden","css","Content","span","toggleDone","remove","TaskList","useSelector","map","onClick","StyledContainer","div","StyledButton","disabled","Buttons","length","every","StyledSection","section","StyledHeader","header","StyledTittle","h2","StyledSectionContent","Section","title","body","extraHeaderContent","Header","StyledMain","main","Container","props","children","Tasks","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","getExampleTasks","a","fetch","response","ok","Error","statusText","json","fetchExampleTasksHandler","saveTasksInLocalStorageHandler","watchFetchExampleTasks","delay","call","exampleTasks","put","alert","select","takeLatest","type","takeEvery","sagaMiddleware","createSagaMiddleware","store","configureStore","reducer","tasksReducer","middleware","run","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ab0167e3.chunk.js","sourcesContent":["import styled from \"styled-components\";\n\nexport const StyledForm = styled.form`\n    display: grid;\n    grid-template-columns: 1fr auto;\n    grid-gap: 20px;\n\n    @media (max-width: ${({ theme }) => theme.breakpoint.mobile}px) {\n        grid-template-columns: 1fr;\n    }\n`\nexport const StyledInput = styled.input`\n    padding: 10px;\n    border: 1px solid ${({ theme }) => theme.color.alto};\n`\nexport const Button = styled.button`\n    padding: 10px;\n    background: hsl(180, 100%, 25%);\n    color: white;\n    border: none;\n    transition: 0.5s;\n\n    &:hover {\n        transform: scale(1.2);\n        background-color: rgb(45, 150, 150);\n    }\n    \n    &:active {\n        background: hsl(180, 100%, 35%)\n    }\n`","const localStorageKey = \"tasks\";\n\nexport const saveTasksInLocalStorage = tasks => \n    localStorage.setItem(localStorageKey, JSON.stringify(tasks));\n\n\nexport const getTasksFromLocalStorage = () => \n    JSON.parse(localStorage.getItem(localStorageKey)) || [];\n\n\n\n","import { createSlice } from '@reduxjs/toolkit';\nimport { getTasksFromLocalStorage } from './tasksLocalStorage';\n\nconst tasksSlice = createSlice({\n    name: \"tasks\",\n    initialState: {\n        tasks: getTasksFromLocalStorage(),\n        hideDone: false,\n    },\n    reducers: {\n        addTask: ({ tasks }, { payload }) => {\n            tasks.push(payload);\n        },\n        toggleHideDone: (state) => {\n            state.hideDone = !state.hideDone;\n        },\n        toggleTaskDone: (state, action) => {\n            const index = state.tasks.findIndex(task => task.id === action.payload);\n            state.tasks[index].done = !state.tasks[index].done;\n        },\n        removeTask: (state, action) => {\n            const index = state.tasks.findIndex(task => task.id === action.payload);\n            state.tasks.splice(index, 1);\n        },\n        setAllDone: ({tasks}) => {\n            for (const task of tasks) {\n                task.done = true;\n            }\n        },\n        fetchExampleTasks: () => {},\n        setTasks: (state, {payload: tasks}) => {\n            state.tasks = tasks;\n        }\n        \n    },\n});\n\nexport const { \n    addTask, \n    toggleHideDone, \n    toggleTaskDone, \n    removeTask, \n    setAllDone, \n    fetchExampleTasks, \n    setTasks \n} = tasksSlice.actions;\nexport const selectTasks = state => state.tasks;\nexport default tasksSlice.reducer;","import React, { useState, useRef } from 'react';\nimport {useDispatch} from \"react-redux\";\nimport { nanoid } from '@reduxjs/toolkit';\nimport { StyledForm, StyledInput, Button } from \"./styled.js\";\nimport { addTask } from \"../tasksSlice\";\n\n\nconst Form = () => {\n\n    const [newTaskContent, setNewTaskContent] = useState(\"\");\n    const inputRef = useRef(null);\n\n    const dispatch = useDispatch();\n\n    const onFormSubmit = (event) => {\n        event.preventDefault();\n        if (newTaskContent.trim() === \"\") {\n            return;\n        }\n\n        dispatch(addTask({\n            content: newTaskContent.trim(),\n            done: false,\n            id:nanoid(),\n        }));\n\n        setNewTaskContent(\"\");\n        inputRef.current.focus();\n    };\n\n    return (\n        <StyledForm\n            className=\"form\"\n            onSubmit={onFormSubmit}\n        >\n            <StyledInput\n                ref={inputRef}\n                value={newTaskContent}\n                placeholder=\"Co jest do zrobienia?\"\n                required\n                onChange={({ target }) => setNewTaskContent(target.value)}\n            />\n            <Button id=\"myTestButton\">Dodaj zadanie </Button>\n        </StyledForm>\n    )\n\n}\n\n\n\nexport default Form;","import styled, { css } from \"styled-components\";\n\nexport const List = styled.ul`\n    padding: 10px;\n    margin: 2px 0;\n    background-color: ${({ theme }) => theme.color.white};\n    max-width: auto;\n`;\n\nexport const Item = styled.li`\n    display: grid;\n    grid-template-columns: 35px 1fr 35px;\n    justify-content: center;\n    align-items: center;\n    border-bottom: 1px solid ${({ theme }) => theme.color.silver};\n    margin-bottom: 10px;\n    padding: 10px 10px 10px 10px;\n\n    ${({ hidden }) => hidden && css`\n        display:none;\n    `}\n`;\n\nexport const Content = styled.span`\n    justify-content: center;\n    overflow-wrap: anywhere;\n    margin: 10px;\n\n    ${({ done }) => done && css`\n        text-decoration: line-through;\n    `}\n`;\n\nexport const Button = styled.button`\n    margin: 10px 0;\n    padding: 5px;\n    font-size: 25px;\n    height: 38px;\n    border: none;\n    color: white;\n    transition: background 0.3s;\n    display: flex;\n    justify-content: center;\n\n    ${({ toggleDone }) => toggleDone && css`\n        transition: 1s;\n        background-color: green;\n        grid-column: 1;\n    \n\n        &:hover {\n            background-color: rgb(9, 145, 9);\n            transform: scale (1.5);\n        }\n    `}    \n\n    ${({ remove }) => remove && css`\n        transition: 1s;\n        background-color: red;\n        grid-column: 3;\n        justify-content: center;\n\n        &:hover {\n            background-color: rgb(172, 46, 46);\n            transform: scale (1.5);\n        }\n    `}\n\n`\n\n","import { List, Item, Content, Button } from \"./styled.js\"\nimport {useSelector, useDispatch} from \"react-redux\";\nimport { selectTasks, toggleTaskDone, removeTask } from \"../tasksSlice.js\";\n\n\nconst TaskList = () => {\n\n    const {tasks, hideDone} = useSelector(selectTasks);\n    const dispatch = useDispatch();\n\n    return (\n        <List>\n        {tasks.map(task => (\n            <Item\n                key={task.id}\n                hidden={task.done && hideDone}\n            >\n                <Button\n                    toggleDone\n                    onClick={() => dispatch(toggleTaskDone(task.id))}\n                >\n                    {task.done ? \" ✔  \" : \" \"}\n                </Button>\n                <Content done={task.done}>\n                    {task.content}\n                </Content>\n                <Button\n                    remove\n                    onClick={() => dispatch(removeTask(task.id))}\n                >\n                    🗑\n                </Button>\n            </Item>\n        ))}\n    </List>\n    )\n}\n    \n;\n\nexport default TaskList;","import styled, { css } from \"styled-components\";\n\nexport const StyledContainer = styled.div`\n    display: flex;\n    flex-wrap: wrap;\n`\n\nexport const StyledButton = styled.button`\n    border: none;\n    background-color: ${({ theme }) => theme.color.white};\n    color: teal;\n    padding: 10px;\n    transition: color 0.5s;\n    margin: 0 0 0 20px;\n\n    @media(max-width: ${({ theme }) => theme.breakpoint.mobile}px) {\n        flex-basis: 100%;\n        margin: 10px;\n    }\n\n    ${({ disabled }) => disabled && css`\n        color: grey;\n    `}\n\n`","import { StyledContainer, StyledButton } from \"./styled.js\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport {\n  selectTasks,\n  toggleHideDone,\n  setAllDone,\n  fetchExampleTasks,\n} from \"../tasksSlice\";\n\nconst Buttons = () => {\n  const { tasks, hideDone } = useSelector(selectTasks);\n  const dispatch = useDispatch();\n\n  if (tasks.length === 0) {\n    return (\n      <StyledButton onClick={() => dispatch(fetchExampleTasks())}>\n        Pobierz przykładowe zadania\n      </StyledButton>\n    );\n  }\n\n  return (\n    <StyledContainer>\n      <StyledButton onClick={() => dispatch(fetchExampleTasks())}>\n        Pobierz przykładowe zadania\n      </StyledButton>\n      <StyledButton onClick={() => dispatch(toggleHideDone())}>\n        {hideDone ? \"Pokaz\" : \"Ukryj\"} ukończone\n      </StyledButton>\n      <StyledButton\n        onClick={() => dispatch(setAllDone())}\n        disabled={tasks.every(({ done }) => done)}\n      >\n        Ukończ wszystkie\n      </StyledButton>\n    </StyledContainer>\n  );\n};\n\nexport default Buttons;\n","import styled from \"styled-components\";\n\nexport const StyledSection = styled.section`\n    margin: 10px 0;\n    background: white;\n    box-shadow: 0 0 5px ${({ theme }) => theme.color.alto};\n`;\n\nexport const StyledHeader = styled.header`\n    display: grid;\n    grid-template-columns: auto auto;\n    grid-gap: 20px;\n    justify-content: space-between;\n    align-items: center;\n    padding: 20px;\n    border-bottom: 1px solid ${({ theme }) => theme.color.alto};\n\n    @media (max-width:${({ theme }) => theme.breakpoint.mobile}px) {\n        grid-template-columns: 1fr;\n    }\n`\nexport const StyledTittle = styled.h2`\n    font-size: 20px;\n    margin: 0;\n`\n\nexport const StyledSectionContent = styled.div`\n    padding: 20px;\n`","import { StyledSection, StyledHeader, StyledTittle, StyledSectionContent } from \"./styled.js\";\n\n\nconst Section = ({ title, body, extraHeaderContent }) => (\n    <StyledSection>\n        <StyledHeader>\n            <StyledTittle> {title} </StyledTittle>\n            {extraHeaderContent}\n        </StyledHeader>\n        <StyledSectionContent>\n            {body}\n        </StyledSectionContent>\n    </StyledSection>\n\n);\n\nexport default Section;","\nconst Header = ({ title }) => (\n    <header>\n        <h1> {title}</h1>\n    </header>\n);\n\nexport default Header;","import styled from \"styled-components\";\n\nexport const StyledMain = styled.main`\n    background-color: ${({ theme }) => theme.color.silver};\n    margin: 0 auto;\n    padding: 20px;\n    max-width: 900px;\n`","import { StyledMain } from \"./styled.js\";\n\nconst Container = (props) => (\n    <StyledMain >\n        {props.children}\n    </StyledMain>\n);\n\nexport default Container;","import styled from \"styled-components\";\n\nexport default styled.button`\n    border: none;\n    background-color: ${({ theme }) => theme.color.white};\n    color: teal;\n    padding: 10px;\n    transition: color 0.5s;\n    margin: 0 0 0 20px;\n\n    @media(max-width: ${({ theme }) => theme.breakpoint.mobile}px) {\n    flex-basis: 100%;\n    margin: 10px;\n    }\n\n    &:hover {\n        filter: brightness(110%);\n    }\n\n    &:active {\n        filter: brightness(120%);\n    }\n\n    &:disabled {\n        color: ${({theme}) => theme.color.silver};\n    }\n`\n","import React from 'react';\nimport Form from \"./Form\";\nimport TaskList from \"./TaskList\";\nimport Buttons from \"./Buttons\";\nimport Section from \"../../common/Section\";\nimport Header from \"../../common/Header\";\nimport Container from \"../../common/Container\";\nimport Button from \"./Button\";\n\n\nfunction Tasks() {\n    return (\n        <Container>\n            <Header title=\"Lista zadań\" />\n            <Section\n                title=\"Dodaj nowe zadanie\"\n                extraHeaderContent={<Button />}\n                body={<Form/>}\n            />\n            < Section\n                title=\"Lista zadań\"\n                extraHeaderContent={<Buttons />}\n                body={<TaskList />}\n            />\n        </Container>\n    );\n};\n\nexport default Tasks;","import Tasks from \"./features/tasks/Tasks\";\n\nconst App = () => <Tasks />\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","export const getExampleTasks = async () => {\n    const response = await fetch(\"/todos-list-react/exampleTasks.json\");\n\n    if(!response.ok) {\n        new Error(response.statusText);\n    }\n    return await response.json();\n};\n ","import {takeLatest, takeEvery, call, put, select, delay} from \"redux-saga/effects\";\nimport {fetchExampleTasks,selectTasks,setTasks } from \"../tasksSlice\";\nimport { getExampleTasks} from \"../getExampleTasks\";\nimport { saveTasksInLocalStorage } from \"../tasksLocalStorage\";\n\n\nfunction* fetchExampleTasksHandler () {\n    try {\n        yield delay (1000);\n        const exampleTasks = yield call(getExampleTasks);\n        yield put(setTasks(exampleTasks));\n    } catch (error) {\n        yield call(alert, \"coś poszło nie tak!\");\n    }\n};\n\nfunction* saveTasksInLocalStorageHandler() {\n    const tasks = yield select(selectTasks);\n    yield call(saveTasksInLocalStorage, tasks)\n}\n\nexport function* watchFetchExampleTasks() {\n    yield takeLatest(fetchExampleTasks.type, fetchExampleTasksHandler);\n    yield takeEvery(\"*\", saveTasksInLocalStorageHandler)\n};","import {configureStore} from \"@reduxjs/toolkit\";\nimport createSagaMiddleware from \"redux-saga\";\nimport { watchFetchExampleTasks } from \"./features/tasks/TaskList/tasksSaga\";\nimport tasksReducer from \"./features/tasks/tasksSlice\";\n\n\nconst sagaMiddleware = createSagaMiddleware();\n\nconst store = configureStore({\n    reducer: {\n        tasks: tasksReducer,\n    },\n    middleware: [sagaMiddleware ],\n});\n\nsagaMiddleware.run(watchFetchExampleTasks);\n\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { ThemeProvider } from \"styled-components\";\nimport {Provider} from \"react-redux\";\nimport './index.css';\nimport App from \"./App.js\" ;\nimport reportWebVitals from './reportWebVitals';\nimport {theme} from \"./theme.js\";\nimport store from \"./store.js\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n    <ThemeProvider theme={theme}>\n      <App />\n    </ThemeProvider>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","export const theme = {\n    color: {\n        white: \"#FFFFFF\",\n        silver: \"#eee\",\n        alto: \"#ddd\",\n    },\n    breakpoint: {\n        mobile: 767,\n    }\n\n};"],"sourceRoot":""}