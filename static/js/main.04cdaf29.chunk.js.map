{"version":3,"sources":["Form/index.js","Tasks/index.js","Buttons/index.js","Section/index.js","Header/index.js","Container/index.js","App.js","reportWebVitals.js","index.js"],"names":["Form","addNewTask","useState","newTaskContent","setNewTaskContent","className","onSubmit","event","preventDefault","trim","value","placeholder","required","onChange","target","id","Tasks","tasks","hideDone","removeTask","toggleTaskDone","map","task","done","onClick","content","Buttons","toggleHideDone","setAllDone","length","disabled","every","Section","title","body","extraHeaderContent","Header","Container","props","children","App","setHideDone","setTasks","filter","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.04cdaf29.chunk.js","sourcesContent":["import React, {useState} from 'react';\nimport \"./style.css\";\n\nconst Form = ({addNewTask}) => {\n\n    const [newTaskContent, setNewTaskContent] = useState(\"\");\n\n    const onFormSubmit = (event) => {\n        event.preventDefault();\n        if( newTaskContent.trim() === \"\") {\n            return;\n        }\n\n        addNewTask(newTaskContent.trim());\n        setNewTaskContent(\"\");\n    }\n\n    return ( \n        <form \n            className=\"form\"\n            onSubmit={onFormSubmit}\n        >\n            <input \n                value={newTaskContent}\n                className=\"form__input\" \n                placeholder=\"Co jest do zrobienia?\" \n                required \n                onChange={({target}) => setNewTaskContent(target.value)} \n            />\n            <button className=\"form__button\" id=\"myTestButton\">Dodaj zadanie </button>\n        </form>\n    )\n\n}\n    \n\n\nexport default Form;","import \"./style.css\";\n\nconst Tasks = ({tasks, hideDone, removeTask, toggleTaskDone}) => (\n    <ul className=\" list__container\">\n        {tasks.map(task => (\n            <li\n                key={task.id}\n                className={`list__item${\n                    task.done && hideDone \n                        ? \" list__item--hidden\" \n                        : \"\"}`\n                }\n            >\n                <button \n                    className=\"list__button list__button--done\"\n                    onClick={() => toggleTaskDone(task.id)}    \n                > \n                    {task.done ? \" âœ”  \" : \" \"}\n                </button>\n                <span className={\n                    `list__content${task.done ? \" list__content--done\" : \"\"}`\n                }>\n                    {task.content}\n                </span>  \n                <button \n                    className=\"list__button list__button--remove\"\n                    onClick={() => removeTask(task.id)}\n                >\n                    ðŸ—‘ \n                </button>\n            </li>\n        ))}\n    </ul>\n);\n\nexport default Tasks;","import \"./style.css\";\n\nconst Buttons = ({tasks, hideDone, toggleHideDone, setAllDone}) => {\n   if(tasks.length === 0) {\n       return null\n   } \n    return (\n        <div className=\"buttons\">\n            <button \n                onClick={toggleHideDone}\n                className=\"buttons__button\"\n                disabled={tasks.every(({done})=> done)}\n            >\n                {hideDone ? \"Pokaz\" : \"Ukryj\"} ukoÅ„czone \n            </button>\n            <button \n                onClick={setAllDone}\n                className=\"buttons__button\"\n                disabled={tasks.every(({done}) => done)}\n            >\n                UkoÅ„cz wszystkie\n            </button>\n        </div>\n    )\n}\n    \n\nexport default Buttons;","import \"./style.css\";\n\nconst Section = ({title, body, extraHeaderContent}) => (\n    <section className=\"section\">\n    <header className=\"section__header\">\n        <h2 className=\"section__title\"> {title} </h2>\n        {extraHeaderContent}\n    </header>\n    <div className=\"section__body\">\n       {body}\n    </div>\n</section>\n\n);\n\nexport default Section;","\nconst Header = ({title}) => (\n    <header>\n        <h1> {title}</h1>\n    </header>\n);\n\nexport default Header;","import \"./style.css\";\n\nconst Container = (props) => (\n    <main className=\"container\">\n        {props.children}\n    </main>\n);\n\nexport default Container;","import React, {useState} from 'react';\nimport Form from \"./Form\";\nimport Tasks from \"./Tasks\";\nimport Buttons from \"./Buttons\";\nimport Section from \"./Section\";\nimport Header from \"./Header\";\nimport Container from \"./Container\";\n\nfunction App() {\n\n    const [hideDone, setHideDone] = useState(false);\n\n    const [tasks, setTasks] = useState([\n        {id:1, content: \"przejÅ›Ä‡ na Reacta\", done: false},\n        {id:2, content: \"zjeÅ›Ä‡ kolacjÄ™\", done: true},\n    ]);\n\n    const toggleHideDone = () => {\n        setHideDone(hideDone => !hideDone);\n    };\n\n    const removeTask = (id) => {\n        setTasks(tasks => tasks.filter(task => task.id !== id));\n    };\n\n    const toggleTaskDone = (id) => {\n        setTasks(tasks => tasks.map(task => {\n            if( task.id === id) {\n                return {...task, done: !task.done};\n            }\n            return task;\n        }))\n    }\n\n    const setAllDone = () => {\n        setTasks( tasks => tasks.map( task => ({\n            ...task,\n            done: true,\n        })));\n    };\n\n    const addNewTask = (newTaskContent) => {\n        setTasks(tasks => [\n            ...tasks,\n            {\n                content: newTaskContent,\n                done: false,\n                id: tasks.length === 0? 1: tasks[tasks.length -1].id + 1,\n            },\n        ]);\n    }\n    return ( \n        <Container>\n        <Header title=\"Lista zadaÅ„\" />\n\n        <Section \n            title=\"Dodaj nowe zadanie\" \n            body={<Form addNewTask={addNewTask} />} \n        />\n        < Section \n            title=\"Lista zadaÅ„\"\n            extraHeaderContent={\n                <Buttons \n                    tasks={tasks} \n                    hideDone={hideDone} \n                    toggleHideDone={toggleHideDone} \n                    setAllDone={setAllDone}\n                />\n            } \n            body={\n                <Tasks \n                    tasks={tasks} \n                    hideDone={hideDone} \n                    removeTask={removeTask} \n                    toggleTaskDone={toggleTaskDone} \n                />\n            } \n        />\n        \n        </Container>\n    );\n};\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}